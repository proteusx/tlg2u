!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/library/tlg/Tlg_readers/proteus/tlg2unicode/tlg2u.github/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ACCENT	./beta_code.h	/^#define ACCENT /;"	d
ACUTE	./beta_code.h	/^#define ACUTE /;"	d
ARKOPA	./beta_code.h	/^#define ARKOPA /;"	d
AUTHOR_CODE	./tlg.h	/^#define AUTHOR_CODE /;"	d
Alpha	./beta_code.h	/^unsigned int Alpha[] = {$/;"	v	typeref:typename:unsigned int[]
BLOCKSIZE	./tlg.h	/^#define BLOCKSIZE /;"	d
BOLD	./tlg.h	/^#define BOLD /;"	d
BOOK	./tlg.h	/^#define BOOK /;"	d
CANON	./tlg.h	/^#define CANON /;"	d
CARET	./beta_code.h	/^#define CARET /;"	d
CORPUS	./tlg.h	/^#define CORPUS /;"	d
Epsilon	./beta_code.h	/^ unsigned int Epsilon[] = {$/;"	v	typeref:typename:unsigned int[]
Eta	./beta_code.h	/^unsigned int Eta[] = {$/;"	v	typeref:typename:unsigned int[]
GRAVE	./beta_code.h	/^#define GRAVE /;"	d
GREEK	./tlg.h	/^#define GREEK /;"	d
GREEK_FONT	./tlg.h	/^#define GREEK_FONT /;"	d
GREEK_UPPER	./beta_code.h	/^#define GREEK_UPPER /;"	d
Iota	./beta_code.h	/^ unsigned int Iota[] = {$/;"	v	typeref:typename:unsigned int[]
KOPA	./beta_code.h	/^#define KOPA /;"	d
LATIN	./tlg.h	/^#define LATIN /;"	d
LATIN_FONT	./tlg.h	/^#define LATIN_FONT /;"	d
LINESIZE	./tlg.h	/^#define LINESIZE /;"	d
M00000111	./output_utf.h	/^#define M00000111 /;"	d
M00001111	./output_utf.h	/^#define M00001111 /;"	d
M00011111	./output_utf.h	/^#define M00011111 /;"	d
M00111111	./output_utf.h	/^#define M00111111 /;"	d
M10000000	./output_utf.h	/^#define M10000000 /;"	d
M11000000	./output_utf.h	/^#define M11000000 /;"	d
M11100000	./output_utf.h	/^#define M11100000 /;"	d
M11110000	./output_utf.h	/^#define M11110000 /;"	d
MARGINSIZE	./tlg.h	/^#define MARGINSIZE /;"	d
MAXIDTSIZE	./find_block.c	/^#define MAXIDTSIZE /;"	d	file:
MAXNUMBERS	./get_num.c	/^#define MAXNUMBERS /;"	d	file:
MAX_BRACKET	./escape_codes.h	/^#define MAX_BRACKET /;"	d
MAX_PUNCTUATION	./escape_codes.h	/^#define MAX_PUNCTUATION /;"	d
MAX_QUASI_BRACKET	./escape_codes.h	/^#define MAX_QUASI_BRACKET /;"	d
MAX_QUOTATION	./escape_codes.h	/^#define MAX_QUOTATION /;"	d
MAX_TEXT_MARKUP	./escape_codes.h	/^#define MAX_TEXT_MARKUP /;"	d
MAX_TEXT_SYMBOLS	./escape_codes.h	/^#define MAX_TEXT_SYMBOLS /;"	d
NO	./tlg.h	/^#define NO /;"	d
OFF	./tlg.h	/^#define OFF /;"	d
ON	./tlg.h	/^#define ON /;"	d
Omega	./beta_code.h	/^unsigned int Omega[] = {$/;"	v	typeref:typename:unsigned int[]
Omicron	./beta_code.h	/^ unsigned int Omicron[] = {$/;"	v	typeref:typename:unsigned int[]
PDF	./tlg.h	/^#define PDF /;"	d
Rho	./beta_code.h	/^unsigned int Rho[] = {$/;"	v	typeref:typename:unsigned int[]
SAMPI	./beta_code.h	/^#define SAMPI /;"	d
SIGFINAL	./beta_code.h	/^#define SIGFINAL /;"	d
SIGFINAL	./which_sigma.c	/^#define SIGFINAL /;"	d	file:
SIGMEDIAL	./beta_code.h	/^#define SIGMEDIAL /;"	d
SIGMEDIAL	./which_sigma.c	/^#define SIGMEDIAL /;"	d	file:
SMALL_SCRIPT	./tlg.h	/^#define SMALL_SCRIPT /;"	d
STIGMA	./beta_code.h	/^#define STIGMA /;"	d
TXT_DIR	./tlg.h	/^#define TXT_DIR /;"	d
UMLAUT	./beta_code.h	/^#define UMLAUT /;"	d
UTF	./tlg.h	/^#define UTF /;"	d
VERSION	./tlg.h	/^#define VERSION /;"	d
YES	./tlg.h	/^#define YES /;"	d
Ypsilon	./beta_code.h	/^ unsigned int Ypsilon[] = {$/;"	v	typeref:typename:unsigned int[]
accents	./tlg.h	/^int accents;                            \/* encoded accents *\/$/;"	v	typeref:typename:int
acitation	./tlg.h	/^char acitation[52][32];              \/* Ascii part (text) of citation *\/$/;"	v	typeref:typename:char[52][32]
alpha	./beta_code.h	/^unsigned int alpha[] = {$/;"	v	typeref:typename:unsigned int[]
author_code	./tlg.h	/^char author_code[5];                         \/* author code number string *\/$/;"	v	typeref:typename:char[5]
before_accents	./beta_code.c	/^char *before_accents = ")(\/\\\\=+|";$/;"	v	typeref:typename:char *
beta_code	./beta_code.c	/^int beta_code()$/;"	f	typeref:typename:int
betastate	./tlg.h	/^int default_betastate, betastate;            \/* default GREEK *\/$/;"	v	typeref:typename:int
bold_flag	./tlg.h	/^int bold_flag;                     \/* bold sequence flag, checks for$/;"	v	typeref:typename:int
book	./tlg.h	/^int book;                                    \/* required book number *\/$/;"	v	typeref:typename:int
bracket_close_symbol	./escape_codes.h	/^unsigned int bracket_close_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
bracket_open	./escape_codes.h	/^unsigned int bracket_open[MAX_BRACKET];$/;"	v	typeref:typename:unsigned int[]
bracket_open_symbol	./escape_codes.h	/^unsigned int bracket_open_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
char_tmp	./beta_code.c	/^char char_tmp;$/;"	v	typeref:typename:char
citations	./tlg.h	/^int citations;                               \/* emit citation numbers *\/$/;"	v	typeref:typename:int
convert	./convert.c	/^void convert()$/;"	f	typeref:typename:void
corpus	./tlg.h	/^char corpus[5];                              \/* tlg, tll, etc *\/$/;"	v	typeref:typename:char[5]
default_betastate	./tlg.h	/^int default_betastate, betastate;            \/* default GREEK *\/$/;"	v	typeref:typename:int
document	./tlg.h	/^int document;                                \/* utf or pdf *\/$/;"	v	typeref:typename:int
epsilon	./beta_code.h	/^unsigned int epsilon[] = {$/;"	v	typeref:typename:unsigned int[]
error_msg	./tlg.h	/^char error_msg[253];                \/* Error return message text *\/$/;"	v	typeref:typename:char[253]
error_return	./macros.h	/^#define error_return(/;"	d
escape_codes	./beta_code.c	/^char *escape_codes = "$&%\\"@#^[]<>{}";$/;"	v	typeref:typename:char *
eta	./beta_code.h	/^unsigned int eta[] = {$/;"	v	typeref:typename:unsigned int[]
find_block	./find_block.c	/^int find_block ( char *idt_file, int book )$/;"	f	typeref:typename:int
get_accents	./accents.c	/^int get_accents(void)$/;"	f	typeref:typename:int
getnum	./get_num.c	/^ int getnum(void)$/;"	f	typeref:typename:int
greek	./beta_code.h	/^unsigned int greek[] = {$/;"	v	typeref:typename:unsigned int[]
greek_accents	./accents.c	/^char *greek_accents = ")(+\/\\\\=|";$/;"	v	typeref:typename:char *
handle_escape_codes	./escape_codes.c	/^void handle_escape_codes(unsigned char beta, int number)$/;"	f	typeref:typename:void
i	./tlg.h	/^int i, j, k;                              \/* sundry variables *\/$/;"	v	typeref:typename:int
icitation	./tlg.h	/^int  icitation[52];                  \/* integer part of citation *\/$/;"	v	typeref:typename:int[52]
id_char	./id_code.c	/^int id_char;	   \/* holds the pointer for the ascii part of the ID arrays *\/$/;"	v	typeref:typename:int
id_code	./id_code.c	/^int id_code()$/;"	f	typeref:typename:int
id_command	./id_code.c	/^int id_command;	 \/* holds the current instruction for ID handling *\/$/;"	v	typeref:typename:int
id_level	./id_code.c	/^int id_level;	   \/* holds translated current id level as an index to ID arrays *\/$/;"	v	typeref:typename:int
id_process	./id_code.c	/^int id_process;	 \/* if non-zero, command must be processed *\/$/;"	v	typeref:typename:int
idt_file	./tlg.h	/^char txt_file[256], idt_file[256];           \/* filename strings *\/$/;"	v	typeref:typename:char[256]
input_buffer	./tlg.h	/^unsigned char input_buffer[BLOCKSIZE];       \/* 8k input data buffer*\/$/;"	v	typeref:typename:unsigned char[]
iota	./beta_code.h	/^unsigned int iota[] = {$/;"	v	typeref:typename:unsigned int[]
j	./tlg.h	/^int i, j, k;                              \/* sundry variables *\/$/;"	v	typeref:typename:int
k	./tlg.h	/^int i, j, k;                              \/* sundry variables *\/$/;"	v	typeref:typename:int
latin_accents	./accents.c	/^char *latin_accents = "+\/\\\\=|";$/;"	v	typeref:typename:char *
lines	./tlg.h	/^int lines;                                   \/* Line numbers in margin *\/$/;"	v	typeref:typename:int
lines_count	./tlg.h	/^long int lines_count;$/;"	v	typeref:typename:long int
main	./tlg.c	/^int main (int argc, char *argv[])$/;"	f	typeref:typename:int
margin	./tlg.h	/^unsigned char margin[MARGINSIZE];           \/* margin text *\/$/;"	v	typeref:typename:unsigned char[]
margin_flag	./tlg.h	/^int margin_flag;                   \/* used with test markups.$/;"	v	typeref:typename:int
margin_pos	./tlg.h	/^int text_pos, margin_pos;               \/* line & margin byte positions *\/$/;"	v	typeref:typename:int
margin_utf_count	./tlg.h	/^int margin_utf_count, text_utf_count;$/;"	v	typeref:typename:int
marginalia	./tlg.h	/^int marginalia;                              \/* emit marginalia *\/$/;"	v	typeref:typename:int
max_margin	./tlg.h	/^int max_margin, max_text;$/;"	v	typeref:typename:int
max_text	./tlg.h	/^int max_margin, max_text;$/;"	v	typeref:typename:int
no_chars	./macros.h	/^#define no_chars(/;"	d
omega	./beta_code.h	/^unsigned int omega[] = {$/;"	v	typeref:typename:unsigned int[]
omicron	./beta_code.h	/^unsigned int omicron[] = {$/;"	v	typeref:typename:unsigned int[]
output_utf	./output_utf.c	/^void output_utf(unsigned long ucode)$/;"	f	typeref:typename:void
par_tmp	./tlg.h	/^char par_tmp[100];                           \/* Temp variable *\/$/;"	v	typeref:typename:char[100]
paragraphs	./tlg.h	/^int paragraphs;                              \/* Paras in left margin *\/$/;"	v	typeref:typename:int
pass	./tlg.h	/^int pass;$/;"	v	typeref:typename:int
pos	./tlg.h	/^int pos;                                     \/* input buffer possition *\/$/;"	v	typeref:typename:int
print_line	./printing.c	/^void print_line()$/;"	f	typeref:typename:void
punctuation	./escape_codes.h	/^unsigned int punctuation[] = {$/;"	v	typeref:typename:unsigned int[]
punctuation_codes	./which_sigma.c	/^char *punctuation_codes = " .,:;_\\"%{}$&";	\/* used by which_sigma *\/$/;"	v	typeref:typename:char *
quasi_bracket_close_symbol	./escape_codes.h	/^unsigned int quasi_bracket_close_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
quasi_bracket_open	./escape_codes.h	/^unsigned int quasi_bracket_open[MAX_QUASI_BRACKET];$/;"	v	typeref:typename:unsigned int[]
quasi_bracket_open_symbol	./escape_codes.h	/^unsigned int quasi_bracket_open_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
quotation_close_symbol	./escape_codes.h	/^unsigned int quotation_close_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
quotation_open	./escape_codes.h	/^unsigned int quotation_open[MAX_QUOTATION]; \/* used to keep track of quotation pairs *\/$/;"	v	typeref:typename:unsigned int[]
quotation_open_symbol	./escape_codes.h	/^unsigned int quotation_open_symbol[] = {$/;"	v	typeref:typename:unsigned int[]
read14bit	./macros.h	/^#define read14bit /;"	d
read7bit	./macros.h	/^#define read7bit /;"	d
read_char	./macros.h	/^#define read_char /;"	d
read_string	./macros.h	/^#define read_string /;"	d
rho	./beta_code.h	/^unsigned int rho[] = {$/;"	v	typeref:typename:unsigned int[]
start_block	./tlg.h	/^int start_block;                             \/* First block to read from *\/$/;"	v	typeref:typename:int
store_accents	./macros.h	/^#define store_accents /;"	d
text	./tlg.h	/^unsigned char text[LINESIZE];               \/* main text *\/$/;"	v	typeref:typename:unsigned char[]
text_dir	./tlg.h	/^char text_dir[253];                          \/* the tlg files directory *\/$/;"	v	typeref:typename:char[253]
text_markup	./escape_codes.h	/^unsigned int text_markup[] =$/;"	v	typeref:typename:unsigned int[]
text_pos	./tlg.h	/^int text_pos, margin_pos;               \/* line & margin byte positions *\/$/;"	v	typeref:typename:int
text_symbols	./escape_codes.h	/^unsigned int text_symbols[] = {$/;"	v	typeref:typename:unsigned int[]
text_utf_count	./tlg.h	/^int margin_utf_count, text_utf_count;$/;"	v	typeref:typename:int
txt_file	./tlg.h	/^char txt_file[256], idt_file[256];           \/* filename strings *\/$/;"	v	typeref:typename:char[256]
txt_handle	./tlg.h	/^int txt_handle;                              \/* text file handle *\/$/;"	v	typeref:typename:int
usage_info	./usage_info.h	/^void usage_info(void)$/;"	f	typeref:typename:void
utf_string	./macros.h	/^#define utf_string(/;"	d
vowels	./beta_code.c	/^char *vowels = "AEHIOUWR";                         \/* Rho is a vowel! *\/$/;"	v	typeref:typename:char *
which_sigma	./which_sigma.c	/^int which_sigma(int nextptr)$/;"	f	typeref:typename:int
xucode	./escape_codes.h	/^unsigned long xucode;    \/* Temp unicode symbol holder *\/$/;"	v	typeref:typename:unsigned long
ypsilon	./beta_code.h	/^unsigned int ypsilon[] = {$/;"	v	typeref:typename:unsigned int[]
